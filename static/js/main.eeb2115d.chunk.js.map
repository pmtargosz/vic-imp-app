{"version":3,"sources":["components/Slide.js","components/PresentationApp.js","serviceWorker.js","index.js"],"names":["Loading","className","Slide","slide","content","slideTitle","slideContent","slideImage","slideImage2","slideCode","slides","useState","loading","setLoad","nSlide","Number","slideStyle","src","alt","dangerouslySetInnerHTML","__html","width","height","frameBorder","allowFullScreen","onLoad","title","FadeTransitionRouter","children","location","TransitionGroup","CSSTransition","key","classNames","timeout","PresentationApp","initSlide","window","pathname","replace","setSlide","setSlides","keyDownHandler","ev","code","nextSlide","prevSlide","length","useEffect","document","addEventListener","removeEventListener","Tabletop","init","callback","googleData","simpleSheet","navigate","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eeb2115d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport '../styles/slide.scss';\n\nconst Loading = () => (\n  <div className=\"slide-loader\">\n    <div className=\"slide-loading\">\n      <div className=\"slide-shadow\"></div>\n      <div className=\"slide-box\"></div>\n    </div>\n  </div>\n);\n\nconst Slide = ({\n  slide,\n  content: { slideTitle, slideContent, slideImage, slideImage2, slideCode },\n  slides\n}) => {\n  const [loading, setLoad] = useState(true);\n  const nSlide = Number(slide);\n  const slideStyle =\n    nSlide === 1\n      ? ' slide-style-1'\n      : nSlide === Number(slides)\n      ? ' slide-style-2'\n      : nSlide % 2 === 0\n      ? ' slide-style-3'\n      : ' slide-style-4';\n  return (\n    <div className={`slide${slideStyle}`}>\n      <div className=\"slide-wrapper\">\n        <div className=\"slide-sq-logo\" />\n        <h1 className=\"slide-title\">{slideTitle}</h1>\n\n        {slideImage && (\n          <div className=\"slide-image\">\n            <img src={slideImage} alt=\"images\" />\n          </div>\n        )}\n        {slideContent && (\n          <div\n            className=\"slide-content\"\n            dangerouslySetInnerHTML={{ __html: slideContent }}\n          />\n        )}\n\n        {slideImage2 && (\n          <div className=\"slide-image\">\n            <img src={slideImage2} alt=\"images\" />\n          </div>\n        )}\n        {slideCode && loading && <Loading />}\n        {slideCode && (\n          <div className={`slide-code${loading ? ' hide' : ''}`}>\n            <iframe\n              width=\"100%\"\n              height=\"400\"\n              frameBorder=\"0\"\n              allowFullScreen=\"allowfullscreen\"\n              onLoad={() => setLoad(false)}\n              title={slideTitle}\n              src={slideCode}\n              className={loading ? 'hide' : ''}\n            ></iframe>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default Slide;\n","import React, { useEffect, useState } from 'react';\nimport { Router, Location, navigate } from '@reach/router';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport Tabletop from 'tabletop';\n\nimport Slide from './Slide';\n\nimport '../styles/index.scss';\n\nconst FadeTransitionRouter = ({ children }) => (\n  <Location>\n    {({ location }) => (\n      <TransitionGroup className=\"transition-group\">\n        <CSSTransition key={location.key} classNames=\"fade\" timeout={500}>\n          <Router location={location} className=\"router\">\n            {children}\n          </Router>\n        </CSSTransition>\n      </TransitionGroup>\n    )}\n  </Location>\n);\n\nconst PresentationApp = () => {\n  const initSlide = Number(window.location.pathname.replace(/\\D/g, '')) || 1;\n\n  const [slide, setSlide] = useState(initSlide);\n  const [slides, setSlides] = useState([]);\n\n  const keyDownHandler = ev =>\n    ev.code === 'ArrowRight'\n      ? nextSlide()\n      : ev.code === 'ArrowLeft' && prevSlide();\n\n  const prevSlide = () => slide > 1 && setSlide(slide - 1);\n\n  const nextSlide = () => slide < slides.length && setSlide(slide + 1);\n\n  useEffect(() => {\n    document.addEventListener('keydown', keyDownHandler);\n    return () => {\n      document.removeEventListener('keydown', keyDownHandler);\n    };\n  });\n\n  useEffect(() => {\n    Tabletop.init({\n      key: '1Y-P-LvlpLqZ1IEJNdtxki3m1ie_akdCcGFNbiYXxB0A',\n      callback: googleData => setSlides(googleData),\n      simpleSheet: true\n    });\n  }, []);\n\n  navigate(`/vic-imp-app/slide/${slide}`);\n\n  return (\n    <div className=\"vic-imp\">\n      <FadeTransitionRouter>\n        {slides.length > 0 && (\n          <Slide\n            path=\"vic-imp-app/slide/:slide\"\n            content={slides[slide - 1]}\n            slides={slides.length}\n          />\n        )}\n      </FadeTransitionRouter>\n    </div>\n  );\n};\n\nexport default PresentationApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/vic-imp-app/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PresentationApp from './components/PresentationApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<PresentationApp />, document.getElementById('vic-imp'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}